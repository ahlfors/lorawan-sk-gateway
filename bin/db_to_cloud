#!/usr/bin/python

import os
import sys
import time
import json
import pprint
import sqlite3
import logging
import argparse
import requests
from tendo import singleton

sys.path.append(os.path.dirname(sys.argv[0]) + '/../lib')

me = singleton.SingleInstance()
pp = pprint.PrettyPrinter(indent=4)

parser = argparse.ArgumentParser(description = 'Process SQLite database and send data to cloud.')
parser.add_argument('-v', '--verbose', action='store_true', help="Print debug to terminal, not just to log file")
args = parser.parse_args()

url="http://api.lorawan.sk/put"

db_file_path = '/tmp/env_monitoring.db'

def dict_factory(cursor, row):
    d = {}
    for idx, col in enumerate(cursor.description):
        d[col[0]] = row[idx]
    return d

while True:
    conn = sqlite3.connect(db_file_path, timeout=11)
    conn.text_factory = str
    conn.row_factory = dict_factory
    c = conn.cursor()

    if args.verbose:
        print("Selecting data from SQL to process...")

    rows = c.execute("SELECT rowid,* FROM data WHERE state=0 LIMIT 2").fetchall()

    if not rows:
        log.debug("No data ... sleeping for 3 seconds")
        time.sleep(3)
        continue

    rowids = []

    try:
        if args.verbose:
            print "Qualifying rows to be sent to cloud:"
            pp.pprint(rows)
        wret = requests.post(url, data=json.dumps(rows, encoding='latin-1'), timeout=7)
    except Exception,e:
        print(str(int(time.time())) + ' ERROR sending data to ' + url + " -> " + str(e))
        time.sleep(5)
        continue

    try:
        print(wret.content)
        for row in json.loads(wret.content):
            rowids.append((row['response']['status'], row['request']['rowid']))
    except Exception as e:
        print str(e)

    if wret.status_code == 200:
        if args.verbose:
            print("Saving: " + str(rowids))
        #c.executemany("UPDATE data SET state=? WHERE rowid=?", rowids)
        print "All OK"
        conn.commit()
    else:
        print("Cloud batch error return code: " + str(wret.status_code))

    conn.close()
    time.sleep(5)

connection.close()
