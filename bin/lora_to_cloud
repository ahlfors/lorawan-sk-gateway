#!/usr/bin/python

import re
import os
import sys
import time
import json
import pika
import pytz
import serial
from pprint import pprint
import sqlite3
import logging
import argparse
from tendo import singleton
from datetime import datetime

#logging.basicConfig(level=logging.DEBUG)

sys.path.append(os.path.dirname(sys.argv[0]) + '/../lib')

me = singleton.SingleInstance()

parser = argparse.ArgumentParser(description = 'Serial to cloud middleware.')
parser.add_argument('-v', '--verbose', action='store_true', help="Be verbose")
args = parser.parse_args()

mq_host      = "lorawan.sk"

def dict_factory(cursor, row):
    d = {}
    for idx, col in enumerate(cursor.description):
        d[col[0]] = row[idx]
    return d

while True:
    try:
        print("Connecting to the RabbitMQ server...")
        credentials = pika.PlainCredentials('test', 'myonetest')
        connection = pika.BlockingConnection(
            pika.ConnectionParameters(
                host=mq_host,
                virtual_host="iot",
                credentials=credentials,
            )
        )
        channel = connection.channel()
        channel.basic_qos(prefetch_count=1)
        channel.queue_declare(queue='hello', durable=True)
        print("...connected")
        break
    except Exception as e:
        print "Unable to connect!"
        print str(e)
        time.sleep(3)
        continue

serial_port = '/dev/ttyAMA0'
baud = 115200
try:
    ser = serial.Serial(serial_port, baud)
except Exception as e:
    raise Exception("Unable to open serial " + serial + " " + str(baud) + ": " + str(e))

print("Starting main loop")
while True:
    out = ser.readline()
    out = re.split('\\n|\\r', out)[0]
    if args.verbose:
        print "Received data from serial interface: " + out
    p = out.strip().split('|')

    if args.verbose:
        pprint(p)

    if p[0] == 'debug':
        if args.verbose:
            print "Skipping debug line from LoRa module\n"
        continue

    try:
        pl = p[1].replace(' ', '').decode('hex')
    except Exception as e:
        print str(e)
        continue

    data = {}

    try:
        data['gw_serial'] = int(p[3])
    except Exception as e:
        print(str(e))
        data['gw_serial'] = 0

    try:
        data['payload'] = str(p[1]).replace(' ', '')
        data['rssi'] = int(p[2])
        # this way the datetime object is timezone-aware
        data['gw_timestamp'] = str(datetime.now(pytz.utc).isoformat())
    except Exception as e:
        print(str(e))
        continue

#    if not connection.is_open:
#        print "Connection not open!"
#        connection.connect()
#        continue

    if args.verbose:
        pprint(data)

    try:
        channel.basic_publish(
                      exchange='iot',
                      routing_key='',
                      body=json.dumps(data),
                      properties=pika.BasicProperties(
                          delivery_mode=2
                          )
                      )

    except Exception,e:
        print(str(int(time.time())) + ' ERROR sending data to ' + mq_host + " -> " + str(e))
        connection.close()
        raise

connection.close()
